import { Component } from '@angular/core';
import {
  Css,
  CssStyleDeclaration,
  EdgeDataDefinition,
  EdgeDefinition, LayoutOptions,
  NodeDataDefinition,
  NodeDefinition, Position, Scratchpad
} from 'cytoscape'
import dagre from 'cytoscape-dagre'

declare var cytoscape: any

class ElementDataDefinition implements cytoscape.ElementDataDefinition {
  /**
   * Cytoscape source says that id is:
   * elided id => autogenerated id
   */
  constructor(
    public id?: string,
    public position?: cytoscape.Position) {
  }
}

class NodeDataDef extends ElementDataDefinition implements cytoscape.NodeDataDefinition {
  [key: string]: any
  constructor(public parent?: string, public id?: string, position?:Position) {
    super(id, position)
  }
}

class EdgeDataDef extends ElementDataDefinition implements cytoscape.EdgeDataDefinition {
  [key: string]: any
  constructor(public source: string, public target: string, public id?: string, position?:Position) {
    super(id, position)
  }
}

class ElementDef implements cytoscape.ElementDefinition {
  group: "nodes";
  data: NodeDataDefinition | EdgeDataDefinition;
  /**
   * Scratchpad data (usually temp or nonserialisable data)
   */
  scratch?: Scratchpad;
  /**
   * The model position of the node (optional on init, mandatory after)
   */
  position?: Position;
  /**
   * can alternatively specify position in rendered on-screen pixels
   */
  renderedPosition?: Position;
  /**
   * Whether the element is selected (default false)
   */
  selected?: boolean;
  /**
   * Whether the selection state is mutable (default true)
   */
  selectable?: boolean;
  /**
   * When locked a node's position is immutable (default false)
   */
  locked?: boolean;
  /**
   * Wether the node can be grabbed and moved by the user
   */
  grabbable?: boolean;
  /**
   * a space separated list of class names that the element has
   */
  classes?: string;
  /**
   *  CssStyleDeclaration;
   */
  style?: CssStyleDeclaration;
  /**
   * you should only use `style`/`css` for very special cases; use classes instead
   */
  css?: Css.Node | Css.Edge;
}

class NodeDef extends ElementDef implements  cytoscape.NodeDefinition {
  data: cytoscape.NodeDataDefinition = new NodeDataDef()
    constructor(id: string, label: string, color?: string, shape?: string, position?: Position, classes?: string) {
    super()
    this.data['id'] = id
    this.data['key'] = id
    this.data['label'] = label
    this.data['caption'] = label
    this.data['color'] = color ? color : 'black'
    this.data['position'] = position
    this.position = position
    this.classes = classes
  }
}

class EdgeDef extends ElementDef implements cytoscape.EdgeDefinition {
  data: cytoscape.EdgeDataDefinition

  constructor(source: string, target: string, label: string) {
    super()
    this.data = new EdgeDataDef(source, target)
    this.data['label'] = label
  }
}

@Component({
  selector: 'app-root',
  template: `
    <h2>Cytoscape Graph Demos</h2>
    <h4>Graph (Layout: {{graph1LayoutOptions.name}})</h4>
    <cytoscape-graph title="Preset One Two"
                     class="graph"
                     debug="true"
                     showToolbar="true"
                     [nodes]="presetNodes"
                     [edges]="presetEdges"
                     [style]="style"
                     [layoutOptions]="graph1LayoutOptions">

    </cytoscape-graph>
    <cytoscape-graph-toolbar [(layoutOptions)]="graph1LayoutOptions"
                             [showToolbarButtons]="true"
                             (layoutOptionsChange)="layoutToolbarChange($event)"
    ></cytoscape-graph-toolbar>
    <h4>Graph 2 (Layout: {{graph2LayoutOptions.name}})</h4>
    <cytoscape-graph title="Dagre One Two"
                     class="graph"
                     debug="true"
                     showToolbar="true"
                     [nodes]="dagreNodes"
                     [edges]="dagreEdges"
                     [style]="style"
                     [layoutOptions]="graph2LayoutOptions">
    </cytoscape-graph>
    <cytoscape-graph-toolbar [(layoutOptions)]="graph2LayoutOptions"
                             [showToolbarButtons]="true"></cytoscape-graph-toolbar>
  `,
  styles: [
    `
      :host {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
      }
      .graph {
        border-bottom: 2px solid red;
        border-top: 2px solid green;
        border-left: 2px solid blue;
        border-right: 2px solid black;
        width: 200px;
        height: 200px;
      }
    `
  ]
})
export class AppComponent {
  title = 'cytoscape-ng-demo';
  presetNodes: NodeDefinition[] = []
  presetEdges: EdgeDefinition[] = []
  dagreNodes: NodeDefinition[] = []
  dagreEdges: EdgeDefinition[] = []
  style = [{
      selector: 'node',
      style: {
        width: 'label',
        height: 'label',
        padding: '1px',
        label: 'data(label)',
        color: 'black', //text color
        'background-color': '#CCCCCC',
        'border-color': 'data(color)',
        'border-width': '1px',
        'border-style': 'solid',
        'text-valign' : 'center',
        'text-halign' : 'center',
        'text-wrap': 'ellipsis',
        shape: 'round-rectangle',
        'font-size': '4pt',
        /*
        ellipse
        triangle
        round-triangle
        rectangle
        round-rectangle
        bottom-round-rectangle
        cut-rectangle
        barrel
        rhomboid
        diamond
        round-diamond
        pentagon
        round-pentagon
        hexagon
        round-hexagon
        concave-hexagon
        heptagon
        round-heptagon
        octagon
        round-octagon
        star
        tag
        round-tag
        vee
         */
      }
    },
    {
      selector: 'edge',
      style: {
        width: 1,
        'curve-style': 'bezier'//curve-style : straight, bezier, unbundled-bezier, segments, taxi, haystack
      }
    }
  ]

  graph1LayoutOptions = {
    name: 'preset',
  }

  graph2LayoutOptions = {
    name: 'dagre',
    fit: true,
    // name: 'preset',
    // nodeSep: 1, // the separation between adjacent nodes in the same rank
    // edgeSep: undefined, // the separation between adjacent edges in the same rank
    // rankSep: undefined, // the separation between each rank in the layout
    // rankDir: 'TB', // 'TB' for top to bottom flow, 'LR' for left to right,
    // tslint:disable-next-line:max-line-length
    // ranker: 'tight-tree', // Type of algorithm to assign a rank to each node in the input graph. Possible values: 'network-simplex', 'tight-tree' or 'longest-path'
    // minLen: function( edge ){ return 1 }, // number of ranks to keep between the source and target of the edge
    // edgeWeight: function( edge ){ return 1 }, // higher weight edges are generally made shorter and straighter than lower weight edges
    //
    // // general layout options
    // fit: true, // whether to fit to viewport
    // padding: 30, // fit padding
    // spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
    // nodeDimensionsIncludeLabels: false, // whether labels should be included in determining the space used by a node
    // animate: false, // whether to transition the node positions
    // tslint:disable-next-line:max-line-length
    // animateFilter: function( node, i ){ return true; }, // whether to animate specific nodes when animation is on; non-animated nodes immediately go to their final positions
    // animationDuration: 500, // duration of animation in ms if enabled
    // animationEasing: undefined, // easing of animation if enabled
    // boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
    // transform: function( node, pos ){ return pos; }, // a function that applies a transform to the final node position
    // ready: function(){console.log(' on layoutready')}, // on layoutready
    // stop: function(){console.log(' on layoutstop')} // on layoutstop
  }

  constructor() {
    cytoscape.use(dagre)

    this.presetNodes.push(new NodeDef("1", "OneLabel", "blue", "oval", {x:141, y:493}))
    this.presetNodes.push(new NodeDef("2", "TwoLabel", "red", "oval", {x:14, y:49}))
    this.presetEdges.push(new EdgeDef("1", "2", "OneToTwoLabel"))

    this.presetNodes = [
      {
        "data":
          {
            "id":"1",
            "key":"1",
            "label":"One Label",
            "caption":"One  Label",
            "color":"blue",
          },
        "position":{"x":11.7,"y":2.3},
        "classes":"blue",
        "style" : {
          "height":"0.5",
          "width":"2.2277"
        }
      },
      {
        "data":
          {
            "id":"2",
            "key":"2",
            "label":"Two Label",
            "caption":"Two  Label",
            "color":"red"
          },
        "classes":"red",
        "position":{"x":20,"y":20},
      }]
    this.presetEdges = [{"data":{"source":"1","target":"2","label":"OneToTwoLabel"}}]
    // this.nodes = [
    //   {
    //     "classes":"oval black ",
    //     "data":{
    //       "id":"1", "key":"1",
    //       "label":"A",
    //       "caption":"A",
    //       "color":"black"
    //     },
    //     "group":"nodes"
    //   },
    //
    //   {"classes":"oval blue ",
    //     "data":{"id":"2", "key":"2","label":"B","caption":"B","color":"red"},
    //     "group":"nodes"}]
    //
    // this.edges = [{"data":{"id":"e0","source":"1","target":"2"},"group":"edges"}]
    this.dagreNodes = [
      {"data":
          {"id":"1",
            "key":"1",
            "label":"One Label",
            "caption":"One Label",
            "color":"blue",
          },
        "classes":"blue"
      },
      {"data":
          {"id":"2",
            "key":"2",
            "label":"Two Label",
            "caption":"Two Label",
            "color":"red"
          },
        "classes":"red"}
    ]
    this.dagreEdges = [{"data":{"source":"1","target":"2","label":"OneToTwoLabel"}}]

  }

  layoutToolbarChange($event: any) {
    console.log(`app gets layout toolbar change ${JSON.stringify($event)}`)
  }
}
